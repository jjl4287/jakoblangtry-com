# Cloud Build configuration for deploying static website
steps:
  # Step 1: Install pnpm and dependencies
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        npm install -g pnpm
        pnpm install
    id: 'setup-dependencies'

  # Step 2: Set NODE_ENV to production for build
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        npm install -g pnpm
        export NODE_ENV=production
        # Ensure public directory exists
        mkdir -p public
        # Copy necessary files to public
        cp index.html public/
        cp script.js public/
        cp styles.css public/
        # Start server briefly to generate env.js
        pnpm start &
        sleep 5
        kill $!
        # Log status
        ls -la public/
    id: 'build-project'
    waitFor: ['setup-dependencies']

  # Step 3: Access OpenWeatherMap API Key from Secret Manager
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        API_KEY=$$(gcloud secrets versions access latest --secret=openweathermap-api-key --project=jakoblangtry-com)
        echo "// Client-side environment variables
        const ENV = {
            OPENWEATHERMAP_API_KEY: '$${API_KEY}'
        };

        // Expose the environment to the window
        window.ENV = ENV;" > public/env.js
        # Verify env.js was created (without printing sensitive data)
        ls -la public/
    id: 'inject-api-key'
    waitFor: ['build-project']

  # Step 4: Copy static files to Cloud Storage bucket with explicit content types
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Copy HTML, JS, CSS files
        gsutil -m cp -r public/index.html gs://${_BUCKET_NAME}/
        gsutil -m cp -r public/script.js gs://${_BUCKET_NAME}/
        gsutil -m cp -r public/styles.css gs://${_BUCKET_NAME}/
        gsutil -m cp -r public/env.js gs://${_BUCKET_NAME}/
        
        # Remove any old profile image if it exists (to prevent confusion)
        gsutil -m rm -f gs://${_BUCKET_NAME}/IMG_1542.jpeg || true
        
        # List bucket contents to verify
        gsutil ls -l gs://${_BUCKET_NAME}/
        
        # Set CORS policy on the bucket
        echo '[{"origin": ["*"],"method": ["GET", "HEAD"],"responseHeader": ["Content-Type", "Content-Length", "Cache-Control"],"maxAgeSeconds": 3600}]' > /tmp/cors.json
        gsutil cors set /tmp/cors.json gs://${_BUCKET_NAME}
    id: 'deploy-files'
    waitFor: ['inject-api-key']

  # Step 5: Set Cache-Control headers for static assets
  - name: 'gcr.io/cloud-builders/gsutil'
    args: ['-m', 'setmeta', '-h', 'Cache-Control:public, max-age=3600', 'gs://${_BUCKET_NAME}/**/*.html', 'gs://${_BUCKET_NAME}/**/*.css', 'gs://${_BUCKET_NAME}/**/*.js']
    id: 'set-cache-control'
    waitFor: ['deploy-files']
    
  # Step 5b: Force no-cache on images to ensure they update properly
  - name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Force images to have no-cache to ensure they refresh properly
        gsutil -m setmeta -h "Cache-Control:no-cache, must-revalidate" gs://${_BUCKET_NAME}/**/*.jpg gs://${_BUCKET_NAME}/**/*.jpeg gs://${_BUCKET_NAME}/**/*.png
    id: 'set-image-cache-control'
    waitFor: ['set-cache-control']

  # Step 6: Set public read access
  - name: 'gcr.io/cloud-builders/gsutil'
    args: ['iam', 'ch', 'allUsers:objectViewer', 'gs://${_BUCKET_NAME}']
    id: 'set-public-access'
    waitFor: ['set-image-cache-control']

  # Step 7: Verify deployment and check content types
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Listing all files in bucket:"
        gsutil ls -L gs://${_BUCKET_NAME}/
        
        # Verify the profile image is accessible
        echo "Verifying profile image is accessible:"
        gsutil stat gs://jakoblangtry.com/profile.jpeg || echo "Profile image not found in storage"
    id: 'verify-deployment'
    waitFor: ['set-public-access']

options:
   logging: CLOUD_LOGGING_ONLY

# Substitutions to be configured in Cloud Build trigger
substitutions:
  _BUCKET_NAME: 'jakoblangtry.com' # Bucket name for static website hosting

# Timeout for the entire build process
timeout: '600s'